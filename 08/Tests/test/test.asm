@256
D=A
@SP
M=D
// call Sys.init 0
@$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($ret.0)
// function Array.new 0
(Array.new)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG0
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS0
D;JLT
@REGULAR_COMPARISON0
0;JMP
(FIRST_NEG0)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG0
D;JLT
@SP
A=M-1
M=-1
@COMP_END0
0;JMP
(SECOND_NEG_FIRST_POS0)
@SP
A=M-1
M=0
@COMP_END0
0;JMP
(SECOND_NEG_FIRST_NEG0)
@REGULAR_COMPARISON0
0;JMP
(REGULAR_COMPARISON0)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS0
D;JGT
@SP
A=M-1
M=0
@COMP_END0
0;JMP
(COMP_SUCCESS0)
@SP
A=M-1
M=-1
(COMP_END0)
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Array.new$IF_TRUE0
D;JNE
@Array.new$IF_FALSE0
0;JMP
(Array.new$IF_TRUE0)
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Array.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Array.new$ret.1)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
(Array.new$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc 1
@Array.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Array.new$ret.2)
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Array.dispose 0
(Array.dispose)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc 1
@Array.dispose$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Array.dispose$ret.3)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Main.main 12
(Main.main)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@LCL
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 2
@LCL
D=M
@2
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 3
@LCL
D=M
@3
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 4
@LCL
D=M
@4
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 5
@LCL
D=M
@5
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 5
@LCL
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 6
@LCL
D=M
@6
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply 2
@Main.main$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.main$ret.0)
// push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply 2
@Main.main$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.main$ret.1)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 5
@LCL
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply 2
@Main.main$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.main$ret.2)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 7
@LCL
D=M
@7
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 5
@LCL
D=M
@5
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide 2
@Main.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.main$ret.3)
// push local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide 2
@Main.main$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.main$ret.4)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide 2
@Main.main$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.main$ret.5)
// pop local 8
@LCL
D=M
@8
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 6
@LCL
D=M
@6
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.poke 2
@Main.main$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.main$ret.6)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 5001
@5001
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 7
@LCL
D=M
@7
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.poke 2
@Main.main$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.main$ret.7)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 5002
@5002
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 8
@LCL
D=M
@8
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.poke 2
@Main.main$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.main$ret.8)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.init 1
(Math.init)
@SP
A=M
M=0
@SP
M=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new 1
@Math.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.0)
// pop static 1
@SP
AM=M-1
D=M
@Math.1
M=D
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new 1
@Math.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.1)
// pop static 0
@SP
AM=M-1
D=M
@Math.0
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.init$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG0
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS0
D;JLT
@REGULAR_COMPARISON0
0;JMP
(FIRST_NEG0)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG0
D;JLT
@SP
A=M-1
M=0
@COMP_END0
0;JMP
(SECOND_NEG_FIRST_POS0)
@SP
A=M-1
M=-1
@COMP_END0
0;JMP
(SECOND_NEG_FIRST_NEG0)
@REGULAR_COMPARISON0
0;JMP
(REGULAR_COMPARISON0)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS0
D;JLT
@SP
A=M-1
M=0
@COMP_END0
0;JMP
(COMP_SUCCESS0)
@SP
A=M-1
M=-1
(COMP_END0)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.init$WHILE_END0
D;JNE
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Math.init$WHILE_EXP0
0;JMP
(Math.init$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.abs 0
(Math.abs)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG1
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS1
D;JLT
@REGULAR_COMPARISON1
0;JMP
(FIRST_NEG1)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG1
D;JLT
@SP
A=M-1
M=0
@COMP_END1
0;JMP
(SECOND_NEG_FIRST_POS1)
@SP
A=M-1
M=-1
@COMP_END1
0;JMP
(SECOND_NEG_FIRST_NEG1)
@REGULAR_COMPARISON1
0;JMP
(REGULAR_COMPARISON1)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS1
D;JLT
@SP
A=M-1
M=0
@COMP_END1
0;JMP
(COMP_SUCCESS1)
@SP
A=M-1
M=-1
(COMP_END1)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.abs$IF_TRUE0
D;JNE
@Math.abs$IF_FALSE0
0;JMP
(Math.abs$IF_TRUE0)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// pop argument 0
@ARG
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.abs$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.multiply 5
(Math.multiply)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG2
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS2
D;JLT
@REGULAR_COMPARISON2
0;JMP
(FIRST_NEG2)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG2
D;JLT
@SP
A=M-1
M=0
@COMP_END2
0;JMP
(SECOND_NEG_FIRST_POS2)
@SP
A=M-1
M=-1
@COMP_END2
0;JMP
(SECOND_NEG_FIRST_NEG2)
@REGULAR_COMPARISON2
0;JMP
(REGULAR_COMPARISON2)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS2
D;JLT
@SP
A=M-1
M=0
@COMP_END2
0;JMP
(COMP_SUCCESS2)
@SP
A=M-1
M=-1
(COMP_END2)
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG3
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS3
D;JLT
@REGULAR_COMPARISON3
0;JMP
(FIRST_NEG3)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG3
D;JLT
@SP
A=M-1
M=-1
@COMP_END3
0;JMP
(SECOND_NEG_FIRST_POS3)
@SP
A=M-1
M=0
@COMP_END3
0;JMP
(SECOND_NEG_FIRST_NEG3)
@REGULAR_COMPARISON3
0;JMP
(REGULAR_COMPARISON3)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS3
D;JGT
@SP
A=M-1
M=0
@COMP_END3
0;JMP
(COMP_SUCCESS3)
@SP
A=M-1
M=-1
(COMP_END3)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG4
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS4
D;JLT
@REGULAR_COMPARISON4
0;JMP
(FIRST_NEG4)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG4
D;JLT
@SP
A=M-1
M=-1
@COMP_END4
0;JMP
(SECOND_NEG_FIRST_POS4)
@SP
A=M-1
M=0
@COMP_END4
0;JMP
(SECOND_NEG_FIRST_NEG4)
@REGULAR_COMPARISON4
0;JMP
(REGULAR_COMPARISON4)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS4
D;JGT
@SP
A=M-1
M=0
@COMP_END4
0;JMP
(COMP_SUCCESS4)
@SP
A=M-1
M=-1
(COMP_END4)
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG5
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS5
D;JLT
@REGULAR_COMPARISON5
0;JMP
(FIRST_NEG5)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG5
D;JLT
@SP
A=M-1
M=0
@COMP_END5
0;JMP
(SECOND_NEG_FIRST_POS5)
@SP
A=M-1
M=-1
@COMP_END5
0;JMP
(SECOND_NEG_FIRST_NEG5)
@REGULAR_COMPARISON5
0;JMP
(REGULAR_COMPARISON5)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS5
D;JLT
@SP
A=M-1
M=0
@COMP_END5
0;JMP
(COMP_SUCCESS5)
@SP
A=M-1
M=-1
(COMP_END5)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop local 4
@LCL
D=M
@4
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.multiply$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.2)
// pop argument 0
@ARG
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.multiply$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.3)
// pop argument 1
@ARG
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG6
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS6
D;JLT
@REGULAR_COMPARISON6
0;JMP
(FIRST_NEG6)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG6
D;JLT
@SP
A=M-1
M=0
@COMP_END6
0;JMP
(SECOND_NEG_FIRST_POS6)
@SP
A=M-1
M=-1
@COMP_END6
0;JMP
(SECOND_NEG_FIRST_NEG6)
@REGULAR_COMPARISON6
0;JMP
(REGULAR_COMPARISON6)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS6
D;JLT
@SP
A=M-1
M=0
@COMP_END6
0;JMP
(COMP_SUCCESS6)
@SP
A=M-1
M=-1
(COMP_END6)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE0
D;JNE
@Math.multiply$IF_FALSE0
0;JMP
(Math.multiply$IF_TRUE0)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@LCL
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 0
@ARG
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 1
@ARG
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.multiply$IF_FALSE0)
(Math.multiply$WHILE_EXP0)
// push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG7
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS7
D;JLT
@REGULAR_COMPARISON7
0;JMP
(FIRST_NEG7)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG7
D;JLT
@SP
A=M-1
M=0
@COMP_END7
0;JMP
(SECOND_NEG_FIRST_POS7)
@SP
A=M-1
M=-1
@COMP_END7
0;JMP
(SECOND_NEG_FIRST_NEG7)
@REGULAR_COMPARISON7
0;JMP
(REGULAR_COMPARISON7)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS7
D;JLT
@SP
A=M-1
M=0
@COMP_END7
0;JMP
(COMP_SUCCESS7)
@SP
A=M-1
M=-1
(COMP_END7)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.multiply$WHILE_END0
D;JNE
// push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG8
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS8
D;JLT
@REGULAR_COMPARISON8
0;JMP
(FIRST_NEG8)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG8
D;JLT
@SP
A=M-1
M=-1
@COMP_END8
0;JMP
(SECOND_NEG_FIRST_POS8)
@SP
A=M-1
M=0
@COMP_END8
0;JMP
(SECOND_NEG_FIRST_NEG8)
@REGULAR_COMPARISON8
0;JMP
(REGULAR_COMPARISON8)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS8
D;JGT
@SP
A=M-1
M=0
@COMP_END8
0;JMP
(COMP_SUCCESS8)
@SP
A=M-1
M=-1
(COMP_END8)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE1
D;JNE
@Math.multiply$IF_FALSE1
0;JMP
(Math.multiply$IF_TRUE1)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@LCL
D=M
@2
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.multiply$IF_FALSE1)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop argument 0
@ARG
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 3
@LCL
D=M
@3
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Math.multiply$WHILE_EXP0
0;JMP
(Math.multiply$WHILE_END0)
// push local 4
@LCL
D=M
@4
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE2
D;JNE
@Math.multiply$IF_FALSE2
0;JMP
(Math.multiply$IF_TRUE2)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.multiply$IF_FALSE2)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.divide 4
(Math.divide)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
@FIRST_NEG9
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS9
D;JLT
@REGULAR_COMPARISON9
0;JMP
(FIRST_NEG9)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG9
D;JLT
@SP
A=M-1
M=0
@COMP_END9
0;JMP
(SECOND_NEG_FIRST_POS9)
@SP
A=M-1
M=0
@COMP_END9
0;JMP
(SECOND_NEG_FIRST_NEG9)
@REGULAR_COMPARISON9
0;JMP
(REGULAR_COMPARISON9)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS9
D;JEQ
@SP
A=M-1
M=0
@COMP_END9
0;JMP
(COMP_SUCCESS9)
@SP
A=M-1
M=-1
(COMP_END9)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE0
D;JNE
@Math.divide$IF_FALSE0
0;JMP
(Math.divide$IF_TRUE0)
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Math.divide$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.divide$ret.4)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
(Math.divide$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG10
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS10
D;JLT
@REGULAR_COMPARISON10
0;JMP
(FIRST_NEG10)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG10
D;JLT
@SP
A=M-1
M=0
@COMP_END10
0;JMP
(SECOND_NEG_FIRST_POS10)
@SP
A=M-1
M=-1
@COMP_END10
0;JMP
(SECOND_NEG_FIRST_NEG10)
@REGULAR_COMPARISON10
0;JMP
(REGULAR_COMPARISON10)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS10
D;JLT
@SP
A=M-1
M=0
@COMP_END10
0;JMP
(COMP_SUCCESS10)
@SP
A=M-1
M=-1
(COMP_END10)
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG11
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS11
D;JLT
@REGULAR_COMPARISON11
0;JMP
(FIRST_NEG11)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG11
D;JLT
@SP
A=M-1
M=-1
@COMP_END11
0;JMP
(SECOND_NEG_FIRST_POS11)
@SP
A=M-1
M=0
@COMP_END11
0;JMP
(SECOND_NEG_FIRST_NEG11)
@REGULAR_COMPARISON11
0;JMP
(REGULAR_COMPARISON11)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS11
D;JGT
@SP
A=M-1
M=0
@COMP_END11
0;JMP
(COMP_SUCCESS11)
@SP
A=M-1
M=-1
(COMP_END11)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG12
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS12
D;JLT
@REGULAR_COMPARISON12
0;JMP
(FIRST_NEG12)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG12
D;JLT
@SP
A=M-1
M=-1
@COMP_END12
0;JMP
(SECOND_NEG_FIRST_POS12)
@SP
A=M-1
M=0
@COMP_END12
0;JMP
(SECOND_NEG_FIRST_NEG12)
@REGULAR_COMPARISON12
0;JMP
(REGULAR_COMPARISON12)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS12
D;JGT
@SP
A=M-1
M=0
@COMP_END12
0;JMP
(COMP_SUCCESS12)
@SP
A=M-1
M=-1
(COMP_END12)
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG13
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS13
D;JLT
@REGULAR_COMPARISON13
0;JMP
(FIRST_NEG13)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG13
D;JLT
@SP
A=M-1
M=0
@COMP_END13
0;JMP
(SECOND_NEG_FIRST_POS13)
@SP
A=M-1
M=-1
@COMP_END13
0;JMP
(SECOND_NEG_FIRST_NEG13)
@REGULAR_COMPARISON13
0;JMP
(REGULAR_COMPARISON13)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS13
D;JLT
@SP
A=M-1
M=0
@COMP_END13
0;JMP
(COMP_SUCCESS13)
@SP
A=M-1
M=-1
(COMP_END13)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop local 2
@LCL
D=M
@2
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.divide$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.5)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.divide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.6)
// pop argument 0
@ARG
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.divide$WHILE_EXP0)
// push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.divide$WHILE_END0
D;JNE
// push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG14
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS14
D;JLT
@REGULAR_COMPARISON14
0;JMP
(FIRST_NEG14)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG14
D;JLT
@SP
A=M-1
M=0
@COMP_END14
0;JMP
(SECOND_NEG_FIRST_POS14)
@SP
A=M-1
M=-1
@COMP_END14
0;JMP
(SECOND_NEG_FIRST_NEG14)
@REGULAR_COMPARISON14
0;JMP
(REGULAR_COMPARISON14)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS14
D;JLT
@SP
A=M-1
M=0
@COMP_END14
0;JMP
(COMP_SUCCESS14)
@SP
A=M-1
M=-1
(COMP_END14)
// pop local 3
@LCL
D=M
@3
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE1
D;JNE
@Math.divide$IF_FALSE1
0;JMP
(Math.divide$IF_TRUE1)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG15
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS15
D;JLT
@REGULAR_COMPARISON15
0;JMP
(FIRST_NEG15)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG15
D;JLT
@SP
A=M-1
M=-1
@COMP_END15
0;JMP
(SECOND_NEG_FIRST_POS15)
@SP
A=M-1
M=0
@COMP_END15
0;JMP
(SECOND_NEG_FIRST_NEG15)
@REGULAR_COMPARISON15
0;JMP
(REGULAR_COMPARISON15)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS15
D;JGT
@SP
A=M-1
M=0
@COMP_END15
0;JMP
(COMP_SUCCESS15)
@SP
A=M-1
M=-1
(COMP_END15)
// pop local 3
@LCL
D=M
@3
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 3
@LCL
D=M
@3
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE2
D;JNE
@Math.divide$IF_FALSE2
0;JMP
(Math.divide$IF_TRUE2)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.divide$IF_FALSE2)
(Math.divide$IF_FALSE1)
@Math.divide$WHILE_EXP0
0;JMP
(Math.divide$WHILE_END0)
(Math.divide$WHILE_EXP1)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@FIRST_NEG16
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS16
D;JLT
@REGULAR_COMPARISON16
0;JMP
(FIRST_NEG16)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG16
D;JLT
@SP
A=M-1
M=-1
@COMP_END16
0;JMP
(SECOND_NEG_FIRST_POS16)
@SP
A=M-1
M=0
@COMP_END16
0;JMP
(SECOND_NEG_FIRST_NEG16)
@REGULAR_COMPARISON16
0;JMP
(REGULAR_COMPARISON16)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS16
D;JGT
@SP
A=M-1
M=0
@COMP_END16
0;JMP
(COMP_SUCCESS16)
@SP
A=M-1
M=-1
(COMP_END16)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@Math.divide$WHILE_END1
D;JNE
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG17
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS17
D;JLT
@REGULAR_COMPARISON17
0;JMP
(FIRST_NEG17)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG17
D;JLT
@SP
A=M-1
M=-1
@COMP_END17
0;JMP
(SECOND_NEG_FIRST_POS17)
@SP
A=M-1
M=0
@COMP_END17
0;JMP
(SECOND_NEG_FIRST_NEG17)
@REGULAR_COMPARISON17
0;JMP
(REGULAR_COMPARISON17)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS17
D;JGT
@SP
A=M-1
M=0
@COMP_END17
0;JMP
(COMP_SUCCESS17)
@SP
A=M-1
M=-1
(COMP_END17)
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE3
D;JNE
@Math.divide$IF_FALSE3
0;JMP
(Math.divide$IF_TRUE3)
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@LCL
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop argument 0
@ARG
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.divide$IF_FALSE3)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Math.divide$WHILE_EXP1
0;JMP
(Math.divide$WHILE_END1)
// push local 2
@LCL
D=M
@2
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE4
D;JNE
@Math.divide$IF_FALSE4
0;JMP
(Math.divide$IF_TRUE4)
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// pop local 1
@LCL
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.divide$IF_FALSE4)
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.sqrt 2
(Math.sqrt)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG18
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS18
D;JLT
@REGULAR_COMPARISON18
0;JMP
(FIRST_NEG18)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG18
D;JLT
@SP
A=M-1
M=0
@COMP_END18
0;JMP
(SECOND_NEG_FIRST_POS18)
@SP
A=M-1
M=-1
@COMP_END18
0;JMP
(SECOND_NEG_FIRST_NEG18)
@REGULAR_COMPARISON18
0;JMP
(REGULAR_COMPARISON18)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS18
D;JLT
@SP
A=M-1
M=0
@COMP_END18
0;JMP
(COMP_SUCCESS18)
@SP
A=M-1
M=-1
(COMP_END18)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE0
D;JNE
@Math.sqrt$IF_FALSE0
0;JMP
(Math.sqrt$IF_TRUE0)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Math.sqrt$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.sqrt$ret.7)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
(Math.sqrt$IF_FALSE0)
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.sqrt$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@FIRST_NEG19
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS19
D;JLT
@REGULAR_COMPARISON19
0;JMP
(FIRST_NEG19)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG19
D;JLT
@SP
A=M-1
M=-1
@COMP_END19
0;JMP
(SECOND_NEG_FIRST_POS19)
@SP
A=M-1
M=0
@COMP_END19
0;JMP
(SECOND_NEG_FIRST_NEG19)
@REGULAR_COMPARISON19
0;JMP
(REGULAR_COMPARISON19)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS19
D;JGT
@SP
A=M-1
M=0
@COMP_END19
0;JMP
(COMP_SUCCESS19)
@SP
A=M-1
M=-1
(COMP_END19)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.sqrt$WHILE_END0
D;JNE
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Math.multiply 2
@Math.sqrt$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.sqrt$ret.8)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG20
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS20
D;JLT
@REGULAR_COMPARISON20
0;JMP
(FIRST_NEG20)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG20
D;JLT
@SP
A=M-1
M=-1
@COMP_END20
0;JMP
(SECOND_NEG_FIRST_POS20)
@SP
A=M-1
M=0
@COMP_END20
0;JMP
(SECOND_NEG_FIRST_NEG20)
@REGULAR_COMPARISON20
0;JMP
(REGULAR_COMPARISON20)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS20
D;JGT
@SP
A=M-1
M=0
@COMP_END20
0;JMP
(COMP_SUCCESS20)
@SP
A=M-1
M=-1
(COMP_END20)
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE1
D;JNE
@Math.sqrt$IF_FALSE1
0;JMP
(Math.sqrt$IF_TRUE1)
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@LCL
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.sqrt$IF_FALSE1)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Math.sqrt$WHILE_EXP0
0;JMP
(Math.sqrt$WHILE_END0)
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.max 0
(Math.max)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG21
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS21
D;JLT
@REGULAR_COMPARISON21
0;JMP
(FIRST_NEG21)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG21
D;JLT
@SP
A=M-1
M=-1
@COMP_END21
0;JMP
(SECOND_NEG_FIRST_POS21)
@SP
A=M-1
M=0
@COMP_END21
0;JMP
(SECOND_NEG_FIRST_NEG21)
@REGULAR_COMPARISON21
0;JMP
(REGULAR_COMPARISON21)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS21
D;JGT
@SP
A=M-1
M=0
@COMP_END21
0;JMP
(COMP_SUCCESS21)
@SP
A=M-1
M=-1
(COMP_END21)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.max$IF_TRUE0
D;JNE
@Math.max$IF_FALSE0
0;JMP
(Math.max$IF_TRUE0)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 1
@ARG
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.max$IF_FALSE0)
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.min 0
(Math.min)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG22
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS22
D;JLT
@REGULAR_COMPARISON22
0;JMP
(FIRST_NEG22)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG22
D;JLT
@SP
A=M-1
M=0
@COMP_END22
0;JMP
(SECOND_NEG_FIRST_POS22)
@SP
A=M-1
M=-1
@COMP_END22
0;JMP
(SECOND_NEG_FIRST_NEG22)
@REGULAR_COMPARISON22
0;JMP
(REGULAR_COMPARISON22)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS22
D;JLT
@SP
A=M-1
M=0
@COMP_END22
0;JMP
(COMP_SUCCESS22)
@SP
A=M-1
M=-1
(COMP_END22)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.min$IF_TRUE0
D;JNE
@Math.min$IF_FALSE0
0;JMP
(Math.min$IF_TRUE0)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop argument 1
@ARG
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Math.min$IF_FALSE0)
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.init 0
(Memory.init)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 0
@SP
AM=M-1
D=M
@Memory.0
M=D
// push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.peek 0
(Memory.peek)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.poke 0
(Memory.poke)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 1
@ARG
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.alloc 2
(Memory.alloc)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG0
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS0
D;JLT
@REGULAR_COMPARISON0
0;JMP
(FIRST_NEG0)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG0
D;JLT
@SP
A=M-1
M=0
@COMP_END0
0;JMP
(SECOND_NEG_FIRST_POS0)
@SP
A=M-1
M=-1
@COMP_END0
0;JMP
(SECOND_NEG_FIRST_NEG0)
@REGULAR_COMPARISON0
0;JMP
(REGULAR_COMPARISON0)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS0
D;JLT
@SP
A=M-1
M=0
@COMP_END0
0;JMP
(COMP_SUCCESS0)
@SP
A=M-1
M=-1
(COMP_END0)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE0
D;JNE
@Memory.alloc$IF_FALSE0
0;JMP
(Memory.alloc$IF_TRUE0)
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Memory.alloc$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.0)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
(Memory.alloc$IF_FALSE0)
// push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@LCL
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Memory.alloc$WHILE_EXP0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG1
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS1
D;JLT
@REGULAR_COMPARISON1
0;JMP
(FIRST_NEG1)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG1
D;JLT
@SP
A=M-1
M=0
@COMP_END1
0;JMP
(SECOND_NEG_FIRST_POS1)
@SP
A=M-1
M=-1
@COMP_END1
0;JMP
(SECOND_NEG_FIRST_NEG1)
@REGULAR_COMPARISON1
0;JMP
(REGULAR_COMPARISON1)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS1
D;JLT
@SP
A=M-1
M=0
@COMP_END1
0;JMP
(COMP_SUCCESS1)
@SP
A=M-1
M=-1
(COMP_END1)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Memory.alloc$WHILE_END0
D;JNE
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@LCL
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Memory.alloc$WHILE_EXP0
0;JMP
(Memory.alloc$WHILE_END0)
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG2
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS2
D;JLT
@REGULAR_COMPARISON2
0;JMP
(FIRST_NEG2)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG2
D;JLT
@SP
A=M-1
M=-1
@COMP_END2
0;JMP
(SECOND_NEG_FIRST_POS2)
@SP
A=M-1
M=0
@COMP_END2
0;JMP
(SECOND_NEG_FIRST_NEG2)
@REGULAR_COMPARISON2
0;JMP
(REGULAR_COMPARISON2)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS2
D;JGT
@SP
A=M-1
M=0
@COMP_END2
0;JMP
(COMP_SUCCESS2)
@SP
A=M-1
M=-1
(COMP_END2)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE1
D;JNE
@Memory.alloc$IF_FALSE1
0;JMP
(Memory.alloc$IF_TRUE1)
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Memory.alloc$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.1)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
(Memory.alloc$IF_FALSE1)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// gt
@SP
AM=M-1
D=M
@FIRST_NEG3
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS3
D;JLT
@REGULAR_COMPARISON3
0;JMP
(FIRST_NEG3)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG3
D;JLT
@SP
A=M-1
M=-1
@COMP_END3
0;JMP
(SECOND_NEG_FIRST_POS3)
@SP
A=M-1
M=0
@COMP_END3
0;JMP
(SECOND_NEG_FIRST_NEG3)
@REGULAR_COMPARISON3
0;JMP
(REGULAR_COMPARISON3)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS3
D;JGT
@SP
A=M-1
M=0
@COMP_END3
0;JMP
(COMP_SUCCESS3)
@SP
A=M-1
M=-1
(COMP_END3)
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE2
D;JNE
@Memory.alloc$IF_FALSE2
0;JMP
(Memory.alloc$IF_TRUE2)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
@FIRST_NEG4
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS4
D;JLT
@REGULAR_COMPARISON4
0;JMP
(FIRST_NEG4)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG4
D;JLT
@SP
A=M-1
M=0
@COMP_END4
0;JMP
(SECOND_NEG_FIRST_POS4)
@SP
A=M-1
M=0
@COMP_END4
0;JMP
(SECOND_NEG_FIRST_NEG4)
@REGULAR_COMPARISON4
0;JMP
(REGULAR_COMPARISON4)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS4
D;JEQ
@SP
A=M-1
M=0
@COMP_END4
0;JMP
(COMP_SUCCESS4)
@SP
A=M-1
M=-1
(COMP_END4)
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE3
D;JNE
@Memory.alloc$IF_FALSE3
0;JMP
(Memory.alloc$IF_TRUE3)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Memory.alloc$IF_END3
0;JMP
(Memory.alloc$IF_FALSE3)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Memory.alloc$IF_END3)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Memory.alloc$IF_FALSE2)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.deAlloc 2
(Memory.deAlloc)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@LCL
D=M
@1
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
@FIRST_NEG5
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS5
D;JLT
@REGULAR_COMPARISON5
0;JMP
(FIRST_NEG5)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG5
D;JLT
@SP
A=M-1
M=0
@COMP_END5
0;JMP
(SECOND_NEG_FIRST_POS5)
@SP
A=M-1
M=0
@COMP_END5
0;JMP
(SECOND_NEG_FIRST_NEG5)
@REGULAR_COMPARISON5
0;JMP
(REGULAR_COMPARISON5)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS5
D;JEQ
@SP
A=M-1
M=0
@COMP_END5
0;JMP
(COMP_SUCCESS5)
@SP
A=M-1
M=-1
(COMP_END5)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE0
D;JNE
@Memory.deAlloc$IF_FALSE0
0;JMP
(Memory.deAlloc$IF_TRUE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Memory.deAlloc$IF_END0
0;JMP
(Memory.deAlloc$IF_FALSE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
@FIRST_NEG6
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS6
D;JLT
@REGULAR_COMPARISON6
0;JMP
(FIRST_NEG6)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG6
D;JLT
@SP
A=M-1
M=0
@COMP_END6
0;JMP
(SECOND_NEG_FIRST_POS6)
@SP
A=M-1
M=0
@COMP_END6
0;JMP
(SECOND_NEG_FIRST_NEG6)
@REGULAR_COMPARISON6
0;JMP
(REGULAR_COMPARISON6)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS6
D;JEQ
@SP
A=M-1
M=0
@COMP_END6
0;JMP
(COMP_SUCCESS6)
@SP
A=M-1
M=-1
(COMP_END6)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE1
D;JNE
@Memory.deAlloc$IF_FALSE1
0;JMP
(Memory.deAlloc$IF_TRUE1)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Memory.deAlloc$IF_END1
0;JMP
(Memory.deAlloc$IF_FALSE1)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@LCL
D=M
@1
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@THAT
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Memory.deAlloc$IF_END1)
(Memory.deAlloc$IF_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// call Memory.init 0
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Sys.init$ret.0)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// call Math.init 0
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Sys.init$ret.1)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// call Main.main 0
@Sys.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Sys.init$ret.2)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
(Sys.init$WHILE_EXP0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.init$WHILE_END0
D;JNE
@Sys.init$WHILE_EXP0
0;JMP
(Sys.init$WHILE_END0)
// function Sys.halt 0
(Sys.halt)
(Sys.halt$WHILE_EXP0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.halt$WHILE_END0
D;JNE
@Sys.halt$WHILE_EXP0
0;JMP
(Sys.halt$WHILE_END0)
// function Sys.wait 1
(Sys.wait)
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@FIRST_NEG0
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS0
D;JLT
@REGULAR_COMPARISON0
0;JMP
(FIRST_NEG0)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG0
D;JLT
@SP
A=M-1
M=0
@COMP_END0
0;JMP
(SECOND_NEG_FIRST_POS0)
@SP
A=M-1
M=-1
@COMP_END0
0;JMP
(SECOND_NEG_FIRST_NEG0)
@REGULAR_COMPARISON0
0;JMP
(REGULAR_COMPARISON0)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS0
D;JLT
@SP
A=M-1
M=0
@COMP_END0
0;JMP
(COMP_SUCCESS0)
@SP
A=M-1
M=-1
(COMP_END0)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Sys.wait$IF_TRUE0
D;JNE
@Sys.wait$IF_FALSE0
0;JMP
(Sys.wait$IF_TRUE0)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.wait$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.wait$ret.3)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
(Sys.wait$IF_FALSE0)
(Sys.wait$WHILE_EXP0)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG1
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS1
D;JLT
@REGULAR_COMPARISON1
0;JMP
(FIRST_NEG1)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG1
D;JLT
@SP
A=M-1
M=-1
@COMP_END1
0;JMP
(SECOND_NEG_FIRST_POS1)
@SP
A=M-1
M=0
@COMP_END1
0;JMP
(SECOND_NEG_FIRST_NEG1)
@REGULAR_COMPARISON1
0;JMP
(REGULAR_COMPARISON1)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS1
D;JGT
@SP
A=M-1
M=0
@COMP_END1
0;JMP
(COMP_SUCCESS1)
@SP
A=M-1
M=-1
(COMP_END1)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END0
D;JNE
// push constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
(Sys.wait$WHILE_EXP1)
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@FIRST_NEG2
D;JLT
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_POS2
D;JLT
@REGULAR_COMPARISON2
0;JMP
(FIRST_NEG2)
@SP
A=M-1
D=M
@SECOND_NEG_FIRST_NEG2
D;JLT
@SP
A=M-1
M=-1
@COMP_END2
0;JMP
(SECOND_NEG_FIRST_POS2)
@SP
A=M-1
M=0
@COMP_END2
0;JMP
(SECOND_NEG_FIRST_NEG2)
@REGULAR_COMPARISON2
0;JMP
(REGULAR_COMPARISON2)
@SP
A=M
D=M
A=A-1
D=M-D
@COMP_SUCCESS2
D;JGT
@SP
A=M-1
M=0
@COMP_END2
0;JMP
(COMP_SUCCESS2)
@SP
A=M-1
M=-1
(COMP_END2)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END1
D;JNE
// push local 0
@LCL
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@LCL
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Sys.wait$WHILE_EXP1
0;JMP
(Sys.wait$WHILE_END1)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop argument 0
@ARG
D=M
@0
D=A+D
@pop
M=D
@SP
AM=M-1
D=M
@pop
A=M
M=D
@Sys.wait$WHILE_EXP0
0;JMP
(Sys.wait$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@R13
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
A=M-1
D=M
@SP
M=M-1
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.error 0
(Sys.error)
(Sys.error$WHILE_EXP0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.error$WHILE_END0
D;JNE
@Sys.error$WHILE_EXP0
0;JMP
(Sys.error$WHILE_END0)
