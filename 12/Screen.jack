// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static bool color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        var int twoToThe_i;

        let screen = 16384;
        let color = true;

        let twoToThe = Array.new(16);
        let i = 0;
        let twoToThe_i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe_i;
            let twoToThe_i = twoToThe_i + twoToThe_i;
            let i = i + 1;
        }
        
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        
        let i = 0;
        while (i < 8192) {
            let screen[i] = 0;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
        *    Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // For this function, you will need to calculate the value x%16.
        // It should be calculated quickly without using multiplication or
        // division, using exactly one basic math/logical operation.
        // In addition, calculating 16384 + y * 32 + x/16 should not use
        // division or multiplication.
        // Pseudocode:
        // 1. Compute the RAM address where the (x,y) pixel is
        //    represented: 16384 + (32*y) + (x/16).
        // 2. Use Memory.peek to get the 16-bit value of this address
        // 3. Use some bitwise operation to set (only) the bit that corresponds
        //    to the pixel to the current color.
        // 4. Use Memory.poke to write the modified 16-bit value to the RAM
        // address.
        var int byteLocation;
        var int pixelLocationInByte;
        var int byteValue;

        let byteLocation = screen + ^^^^^y + ####x;
        let pixelLocationInByte = x & 15;

        let byteValue = Memory.peek(byteLocation);
        let byteValue = (byteValue & (~twoToThe[pixelLocationInByte])) | (twoToThe[pixelLocationInByte] & color);

        do Memory.poke(byteLocation, byteValue);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        // The case where x1 != x2 and y1 != y2 should be implemented without
        // multiplication or division.
        // Pseudocode:
        // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
        // 2. Compute dx and dy
        // 3. while ((a <= dx) and (b <= dy))
        // 4.   do drawPixel(x+a, y+b)
        // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
        // 6.   else          { let b=b+1, diff=diff-dx }
        //
        // The case where y1 == y2 can be implemented efficiently by
        // trying to draw as many pixels as possible in a single assignment,
        // similarly to Fill in project 4.

        var int x, y, a, b, diff, dx, dy, temp;
        var bool mirroredY;

        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        // enforce x1 < x2
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let mirroredY = (y1 > y2);
        if (mirroredY) {
            let y1 = -y1;
            let y2 = -y2;
        }

        let x = x1;
        let y = y1;
        let a = 0;
        let b = 0;
        let diff = 0;

        let dx = x2 - x1;
        let dy = y2 - y1;

        /*
        do Output.printInt(x1);
        do Output.printString(", ");
        do Output.printInt(x2);
        do Output.printString(" | ");
        do Output.printInt(y1);
        do Output.printString(", ");
        do Output.printInt(y2);
        do Output.printString(" | ");
        do Output.printInt(x);
        do Output.printString(", ");
        do Output.printInt(y);
        do Output.printString(" | ");
        do Output.printInt(dx);
        do Output.printString(", ");
        do Output.printInt(dy);
        do Output.println();
        */

        while ((a < (dx + 1)) & (b < (dy + 1))) {
            if (mirroredY) {
                do Screen.drawPixel(x+a, -(y+b));
            }
            else {
                do Screen.drawPixel(x+a, y+b);
            }
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    function void drawHorizontalLine(int start, int end, int y) {
        var int startByteLocation;
        var int startPixelLocationInByte;
        var int endByteLocation;
        var int endPixelLocationInByte;
        var int byteValue;
        var int mask;

        if (start > end) {
            let mask = start;
            let start = end;
            let end = mask;
        }

        let startByteLocation = screen + ^^^^^y + ####start;
        let endByteLocation = screen + ^^^^^y + ####end;
        let startPixelLocationInByte = start & 15;
        let endPixelLocationInByte = end & 15;

        if (startByteLocation = endByteLocation) {
            let byteValue = Memory.peek(startByteLocation);
            let mask = ((~Screen.nOnesMask(startPixelLocationInByte) | twoToThe[startPixelLocationInByte])) & Screen.nOnesMask(endPixelLocationInByte);
            let byteValue = (byteValue & (~mask)) | (mask & color);
            do Memory.poke(startByteLocation, byteValue);
            return;
        }

        let byteValue = Memory.peek(startByteLocation);
        let mask = (~Screen.nOnesMask(startPixelLocationInByte) | twoToThe[startPixelLocationInByte]);
        let byteValue = (byteValue & (~mask)) | (mask & color);
        do Memory.poke(startByteLocation, byteValue);
        
        let startByteLocation = startByteLocation + 1;
        while (startByteLocation < endByteLocation) {
            do Memory.poke(startByteLocation, color);
            let startByteLocation = startByteLocation + 1;
        }

        let byteValue = Memory.peek(endByteLocation);
        let mask = Screen.nOnesMask(endPixelLocationInByte);
        let byteValue = (byteValue & (~mask)) | (mask & color);
        do Memory.poke(endByteLocation, byteValue);
        return;
    }

    function int nOnesMask(int n) {
        return (^twoToThe[n]) - 1;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
        * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int pivot;
        let pivot = y1;
        while (pivot < (y2 + 1)) {
            do Screen.drawLine(x1, pivot, x2, pivot);
            let pivot = pivot + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        // This can be implemented efficiently by drawing multiple lines at
        // each iteration. You can use multiplication and sqrt.
        // Pseudocode:
        // 1. for (dy = -r ... r)
        // 2.   let halfWidth = sqrt(r*r - dy*dy)
        // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
        var int dy;
        var int halfWidth;
        let dy = -r;
        
        while ((dy < r) & (dy < 182)) {
            let halfWidth = Math.sqrt((r*r) -(dy*dy));
            do Screen.drawLine (x - halfWidth, y + dy, x + halfWidth, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
