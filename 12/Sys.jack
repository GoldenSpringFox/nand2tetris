// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library that supports various program execution services.
 */
class Sys {
    static int loopsInOneMillisecond;

    /** Performs all the initializations required by the OS. */
    function void init() {

        let loopsInOneMillisecond = 300;

        // Pseudocode:
        // 1. for each relevant OS class, do Class.init
        //    Some OS classes depend on others, so order is important here!
        
        do Keyboard.init();
        do Math.init();
        do Memory.init();
        do Output.init();
        do Screen.init();

        do Main.main();

        do Sys.halt();

        return;
    }

    /** Halts program execution. */
    function void halt() {
        while (true) {}
        return;
    }

    /** Waits approximately duration milliseconds and returns.  */
    function void wait(int duration) {
        var int i;
        var int j;
        var int k;
        var int loopsInDuration;

        let i = 0;
        let j = 0;
        let k = 0;
        let loopsInDuration = loopsInOneMillisecond * duration;
        while ((i < loopsInDuration) & (j < loopsInDuration) & (k < loopsInDuration)) {
            if (i < loopsInDuration) {
                let i = i + 1;
            }
            else {
                let i = 0;
                if (j < loopsInDuration) {
                    let j = j + 1;
                }
                else {
                    let i = 0;
                    let j = 0;
                    let k = k + 1;
                }
            }
        }

        return;
    }

    /** Displays the given error code in the form "ERR<errorCode>",
     *  and halts the program's execution. */
    function void error(int errorCode) {
        var String err;
        let err = String.new(10);
        do err.appendChar("E");
        do err.appendChar("R");
        do err.appendChar("R");

        do Output.printString(err);
        do Output.printInt(errorCode);

        do err.dispose();

        do Sys.halt();

        return;
    }
}
