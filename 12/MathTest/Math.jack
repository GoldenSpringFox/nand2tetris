// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int q_y_2;

    /** Initializes the library. */
    function void init() {
        var int i;
        var int twoToThe_i;

        let twoToThe = Array.new(16);
        let i = 0;
        let twoToThe_i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe_i;
            let twoToThe_i = twoToThe_i + twoToThe_i;
            let i = i + 1;
        }
        
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** 
        * Returns the product of x and y. 
        * When a Jack compiler detects the multiplication operator '*' in the 
        * program's code, it handles it by invoking this method. In other words,
        * the Jack expressions x*y and multiply(x,y) return the same value.
        */
    function int multiply(int x, int y) {
        // Pseudocode:
        // 1. let sum = 0
        // 2. let shiftedx = x
        // 3. for i = 0 ... n-1 do
        // 4.   if ((i-th bit of y) == 1)
        // 5.      let sum = sum + shiftedx
        // 6.   let shiftedx = 2*shiftedx
        // 7. return sum

        var int sum;
        var int shiftedX;
        var int i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < 16) {
            if (Math.bit(y, i) = 1) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    function int bit(int y, int i) {
        if (y & twoToThe[i] = 0) {
            return 0;
        }
        return 1;
    }

    /** 
        * Returns the integer part of x/y.
        * When a Jack compiler detects the multiplication operator '/' in the 
        * program's code, it handles it by invoking this method. In other words,
        * the Jack expressions x/y and divide(x,y) return the same value.
        */
    function int divide(int x, int y) {
        // This should be implemented without using multiplication.
        // Hint: updating the value of 2*q*y in the "if" statement requires
        // at most a single addition operator at every recursion step.
        
        var int result;
        var bool neg;

        let neg = false;
        if (x < 0) {
            let neg = ~neg;
        }
        if (y < 0) {
            let neg = ~neg;
        }

        let result = Math.divideRecursion(Math.abs(x), Math.abs(y));
        if (neg) {
            return -result;
        }

        return result;
    }

    function int divideRecursion(int x, int y) {
        // Pseudocode:
        // 1. if (y > x) return 0
        // 2. let q = divide(x, 2*y)
        // 3. if ((x - 2*q*y) < y)
        // 4.   return 2*q
        // 5. else
        // 6.   return 2*q + 1
        var int q;

        if ((y > x) | (y < 0)) {
            let q_y_2 = 0;
            return 0;
        }

        let q = Math.divideRecursion(x, y+y);
        if ((x - q_y_2) < y) {
            return q + q;
        }
        let q_y_2 = q_y_2 + y;
        return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // This should be implemented without using multiplication or division.
        // Pseudocode (where '**' is the mathematical power function):
        // 1. let y = 0
        // 2. for j = (n/2 - 1) ... 0 do
        // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
        // 4. return y

        var int y;
        var int j;
        var int largerY;
        var int largerYsquared;

        let y = 0;
        let j = 7;
        while (j > -1) {
            let largerY = (y + twoToThe[j]);
            let largerYsquared = Math.definitlyNotMultiplication(largerY, largerY);

            if (((largerYsquared - 1) < x) & (largerYsquared > 0)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }

        return y;
    }

    function int definitlyNotMultiplication(int x, int y) {
        return x * y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        return a;
    }
}
