// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[15], b=instruction[12], out=AMSel);
    Mux16(a=AOut, b=inM, sel=AMSel, out=AMOut);
    ALU(x=DOut, y=AMOut, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], 
        no=instruction[6], out=aluOut, out=outM, zr=aluZr, ng=aluNg);
    
    And(a=instruction[15], b=instruction[3], out=writeM);

    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn);
    Not(in=instruction[15], out=AInstruction);
    And(a=instruction[15], b=instruction[5], out=CInstructionLoadA);
    Or(a=AInstruction, b=CInstructionLoadA, out=LoadA);
    ARegister(in=aIn, load=LoadA, out=AOut, out[0..14]=addressM);
    
    And(a=instruction[15], b=instruction[4], out=CInstructionLoadD);
    DRegister(in=aluOut, load=CInstructionLoadD, out=DOut);
    
    Or(a=aluNg, b=aluZr, out=aluNgZr);
    Not(in=aluNgZr, out=aluPs);
    And(a=aluNg, b=instruction[2], out=jumpNg);
    And(a=aluZr, b=instruction[1], out=jumpZr);
    And(a=aluPs, b=instruction[0], out=jumpPs);
    Or(a=jumpNg, b=jumpZr, out=jumpNgZr);
    Or(a=jumpNgZr, b=jumpPs, out=jumpNgZrPs);
    Mux(a=false, b=jumpNgZrPs, sel=instruction[15], out=pcLoad);
    PC(in=AOut, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);
}